// üìÅ src/test/java/hcmute/edu/vn/baiTapCuoiKyKTPM/whitebox/StudentServiceWhiteBoxTests.java

package hcmute.edu.vn.baiTapCuoiKyKTPM.whitebox;

import hcmute.edu.vn.baiTapCuoiKyKTPM.dto.response.StudentDetailResponse;
import hcmute.edu.vn.baiTapCuoiKyKTPM.dto.response.StudentSearchResponse;
import hcmute.edu.vn.baiTapCuoiKyKTPM.model.*;
import hcmute.edu.vn.baiTapCuoiKyKTPM.repository.StudentRepository;
import hcmute.edu.vn.baiTapCuoiKyKTPM.service.StudentService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

/**
 * Ki·ªÉm th·ª≠ h·ªôp tr·∫Øng - Ki·ªÉm tra c·∫•u tr√∫c n·ªôi b·ªô v√† logic c·ªßa code
 * Ki·ªÉm tra c√°c ƒë∆∞·ªùng d·∫´n th·ª±c thi, ƒëi·ªÅu ki·ªán r·∫Ω nh√°nh, v√≤ng l·∫∑p
 */
@ExtendWith(MockitoExtension.class)
class StudentServiceWhiteBoxTests {

    @Mock
    private StudentRepository studentRepository;

    @InjectMocks
    private StudentService studentService;

    private Student mockStudent;
    private StudentInfo mockStudentInfo;
    private ExamParticipation mockExamParticipation;

    @BeforeEach
    void setUp() {
        mockStudentInfo = new StudentInfo();
        mockStudentInfo.setFullName("Nguy·ªÖn VƒÉn A");
        mockStudentInfo.setStudentClass("20DTHD1");
        mockStudentInfo.setMajor("C√¥ng ngh·ªá th√¥ng tin");
        mockStudentInfo.setFaculty("C√¥ng ngh·ªá th√¥ng tin");

        mockExamParticipation = new ExamParticipation();
        mockExamParticipation.setExamDate("2025-06-25");
        mockExamParticipation.setArea("A2");
        mockExamParticipation.setShift("Ca 1");
        mockExamParticipation.setRoom("P.201");

        mockStudent = new Student();
        mockStudent.setId("1");
        mockStudent.setStudentId("20110001");
        mockStudent.setCurrentInfo(mockStudentInfo);
        mockStudent.setExamParticipations(Arrays.asList(mockExamParticipation));
    }

    @Test
    void testSearchStudents_BranchCoverage_EmptyQuery() {
        // Ki·ªÉm tra nh√°nh: query r·ªóng ho·∫∑c null

        // Test v·ªõi null
        when(studentRepository.findByStudentIdOrFullNameContaining(null))
                .thenReturn(Collections.emptyList());

        List<StudentSearchResponse> result1 = studentService.searchStudents(null);
        assertNotNull(result1);
        assertTrue(result1.isEmpty());

        // Test v·ªõi chu·ªói r·ªóng
        when(studentRepository.findByStudentIdOrFullNameContaining(""))
                .thenReturn(Collections.emptyList());

        List<StudentSearchResponse> result2 = studentService.searchStudents("");
        assertNotNull(result2);
        assertTrue(result2.isEmpty());

        // Test v·ªõi chu·ªói ch·ªâ c√≥ kho·∫£ng tr·∫Øng
        when(studentRepository.findByStudentIdOrFullNameContaining("   "))
                .thenReturn(Collections.emptyList());

        List<StudentSearchResponse> result3 = studentService.searchStudents("   ");
        assertNotNull(result3);
        assertTrue(result3.isEmpty());
    }
    @Test
    void testGetExamAreasByDate_BranchCoverage_ValidDate() {
        // Ki·ªÉm tra nh√°nh: ng√†y h·ª£p l·ªá

        LocalDate examDate = LocalDate.of(2025, 6, 25);
        List<Student> mockStudents = Arrays.asList(mockStudent);
        when(studentRepository.findByExamDate("2025-06-25")).thenReturn(mockStudents);

        List<String> result = studentService.getExamAreasByDate(examDate);

        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("A2", result.get(0));
        verify(studentRepository, times(1)).findByExamDate("2025-06-25");
    }
    @Test
    void testGetStudentsByExamRoom_PathCoverage_AllParameters() {
        // Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n: t·∫•t c·∫£ tham s·ªë h·ª£p l·ªá

        LocalDate examDate = LocalDate.of(2025, 6, 25);
        String area = "A2";
        String shift = "Ca 1";
        String room = "P.201";

        List<Student> mockStudents = Arrays.asList(mockStudent);
        when(studentRepository.findByExamDateAndAreaAndShiftAndRoom(
                "2025-06-25", area, shift, room)).thenReturn(mockStudents);

        List<StudentSearchResponse> result = studentService.getStudentsByExamRoom(
                examDate, area, shift, room);

        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("20110001", result.get(0).getStudentId());

        verify(studentRepository, times(1))
                .findByExamDateAndAreaAndShiftAndRoom("2025-06-25", area, shift, room);
    }

    @Test
    void testDataTransformation_InternalLogic() {
        // Ki·ªÉm tra logic chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu n·ªôi b·ªô

        // T·∫°o student v·ªõi th√¥ng tin ph·ª©c t·∫°p
        Student complexStudent = new Student();
        complexStudent.setId("complex1");
        complexStudent.setStudentId("20110002");

        StudentInfo info = new StudentInfo();
        info.setFullName("Tr·∫ßn Th·ªã B");
        info.setStudentClass("20DTHD2");
        info.setMajor("Khoa h·ªçc m√°y t√≠nh");
        info.setFaculty("C√¥ng ngh·ªá th√¥ng tin");
        info.setDob("15/05/2000");
        info.setGender("N·ªØ");
        info.setPhotoUrl("/student2.jpg");
        complexStudent.setCurrentInfo(info);

        ExamStatus status = new ExamStatus();
        status.setExamEligibility("suspended");
        status.setReason("Vi ph·∫°m quy ch·∫ø thi");
        complexStudent.setStatus(status);

        List<ExamParticipation> participations = new ArrayList<>();
        ExamParticipation participation1 = new ExamParticipation();
        participation1.setExamDate("2025-06-25");
        participation1.setArea("B1");
        participation1.setShift("Ca 2");
        participation1.setRoom("P.301");
        participations.add(participation1);

        ExamParticipation participation2 = new ExamParticipation();
        participation2.setExamDate("2025-06-26");
        participation2.setArea("B2");
        participation2.setShift("Ca 1");
        participation2.setRoom("P.302");
        participations.add(participation2);

        complexStudent.setExamParticipations(participations);
        complexStudent.setCreatedAt(LocalDateTime.now());
        complexStudent.setUpdatedAt(LocalDateTime.now());

        when(studentRepository.findByStudentId("20110002")).thenReturn(Optional.of(complexStudent));

        // Test chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu
        Optional<StudentDetailResponse> result = studentService.getStudentDetail("20110002");

        assertTrue(result.isPresent());
        StudentDetailResponse response = result.get();

        // Ki·ªÉm tra chuy·ªÉn ƒë·ªïi th√¥ng tin c∆° b·∫£n
        assertEquals("complex1", response.getId());
        assertEquals("20110002", response.getStudentId());

        // Ki·ªÉm tra chuy·ªÉn ƒë·ªïi th√¥ng tin chi ti·∫øt
        assertEquals("Tr·∫ßn Th·ªã B", response.getCurrentInfo().getFullName());
        assertEquals("20DTHD2", response.getCurrentInfo().getStudentClass());
        assertEquals("Khoa h·ªçc m√°y t√≠nh", response.getCurrentInfo().getMajor());

        // Ki·ªÉm tra chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i
        assertEquals("suspended", response.getStatus().getExamEligibility());
        assertEquals("Vi ph·∫°m quy ch·∫ø thi", response.getStatus().getReason());

        // Ki·ªÉm tra chuy·ªÉn ƒë·ªïi danh s√°ch thi
        assertEquals(2, response.getExamParticipations().size());
        assertEquals("B1", response.getExamParticipations().get(0).getArea());
        assertEquals("B2", response.getExamParticipations().get(1).getArea());
    }

    @Test
    void testExceptionHandling_InternalMethods() {
        // Ki·ªÉm tra x·ª≠ l√Ω exception trong c√°c ph∆∞∆°ng th·ª©c n·ªôi b·ªô

        // Test khi repository throw exception
        when(studentRepository.findByStudentId("ERROR_ID"))
                .thenThrow(new RuntimeException("Database error"));

        // Ph∆∞∆°ng th·ª©c ph·∫£i x·ª≠ l√Ω exception gracefully
        assertThrows(RuntimeException.class, () -> {
            studentService.getStudentDetail("ERROR_ID");
        });
    }

    @Test
    void testEdgeCases_BoundaryValues() {
        // Ki·ªÉm tra c√°c tr∆∞·ªùng h·ª£p bi√™n

        // Test v·ªõi chu·ªói r·∫•t d√†i
        String longQuery = "A".repeat(1000);
        when(studentRepository.findByStudentIdOrFullNameContaining(longQuery))
                .thenReturn(Collections.emptyList());

        List<StudentSearchResponse> result1 = studentService.searchStudents(longQuery);
        assertNotNull(result1);
        assertTrue(result1.isEmpty());

        // Test v·ªõi ng√†y ·ªü bi√™n
        LocalDate minDate = LocalDate.MIN;
        LocalDate maxDate = LocalDate.MAX;

        List<String> result2 = studentService.getExamAreasByDate(minDate);
        assertNotNull(result2);

        List<String> result3 = studentService.getExamAreasByDate(maxDate);
        assertNotNull(result3);
    }
}
